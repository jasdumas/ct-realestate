s # observable positive correlation
library(shiny)
shinyApp(
ui = pageWithSidebar(
headerPanel('CT Real Estate k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(real_estate), selected = "AssessedValue2"),
selectInput('ycol', 'Y Variable', names(real_estate),
selected="SalePrice2"),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
),
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999")),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
real_estate[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
library(shiny)
fit = lm(SalePrice2 ~ AssessedValue2 + Name, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
x = "Assesed Value ($)", y = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
x = "Assesed Value ($)", y = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s
real_estate$county <- NA
str(real_estate)
?ifelse
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield")
fairfield <- c("Bethel","Bridgeport","Brookfield","Danbury","Darien",
"Easton","Fairfield","Greenwich","Monroe","New Canaan","New Fairfield",
"Newtown","Norwalk","Redding","Ridgefield","Shelton","Sherman","Stamford",
"Stratford","Trumbull","Weston","Westport","Wilton")
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield")
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield", "")
View(head(real_estate, n = 100))
hartford <- c("Avon","Berlin",
"Bloomfield",
"Bristol",
"Burlington",
"Canton",
"East Granby",
"East Hartford",
"East Windsor",
"Enfield",
"Farmington",
"Glastonbury",
"Granby",
"Hartford",
"Hartland",
"Manchester",
"Marlborough",
"New Britain",
"Newington",
"Plainville",
"Rocky Hill",
"Simsbury",
"South Windsor",
"Southington",
"Suffield",
"West Hartford",
"Wethersfield",
"Windsor",
"Windsor Locks")
real_estate$county <- ifelse(real_estate$Name %in% hartford, "Hartford", "")
View(real_estate)
real_estate$county[which(real_estate$Name %in% fairfield)] <- "Fairfield"
real_estate$county[which(real_estate$Name %in% hartford)] <- "hartford"
View(real_estate)
real_estate$county[which(real_estate$Name %in% hartford)] <- "Hartford"
litchfield <- c("Barkhamsted","Bethlehem","Bridgewater","Canaan",
"Colebrook","Cornwall","Goshen","Harwinton","Kent","Litchfield",
"Morris","New Hartford","New Milford","Norfolk","North Canaan",
"Plymouth","Roxbury","Salisbury","Sharon","Thomaston","Torrington","Warren",
"Washington","Watertown","Winchester","Woodbury")
real_estate$county[which(real_estate$Name %in% litchfield)] <- "Litchfield"
View(real_estate)
middlesex <- c("Chester","Clinton","Cromwell","Deep River",
"Durham","East Haddam","East Hampton","Essex","Haddam",
"Killingworth","Middlefield","Middletown","Old Saybrook","Portland","Westbrook")
real_estate$county[which(real_estate$Name %in% middlesex)] <- "Middlesex"
newhaven <- c("Ansonia","Beacon Falls","Bethany","Branford",
"Cheshire","Derby","East Haven","Guilford","Hamden","Madison","Meriden",
"Middlebury","Milford","Naugatuck","New Haven","North Branford",
"North Haven","Orange","Oxford","Prospect","Seymour","Southbury",
"Wallingford","Waterbury","West Haven","Wolcott","Woodbridge")
real_estate$county[which(real_estate$Name %in% newhaven)] <- "New Haven"
newlondon <- c("Bozrah", "Colchester","East Lyme","Franklin",
"Griswold","Groton","Lebanon","Ledyard","Lisbon","Lyme",
"Montville","New London","North Stonington","Norwich",
"Old Lyme","Preston","Salem","Sprague","Stonington","Voluntown","Waterford")
real_estate$county[which(real_estate$Name %in% newlondon)] <- "New London"
tolland <- c("Andover","Bolton","Columbia","Coventry","Ellington",
"Hebron","Mansfield","Somers","Stafford","Tolland",
"Union","Vernon","Willington")
real_estate$county[which(real_estate$Name %in% tolland)] <- "Tolland"
View(real_estate)
windham <- c("Ashford","Brooklyn","Canterbury","Chaplin","Eastford",
"Hampton","Killingly","Plainfield","Pomfret","Putnam","Scotland",
"Sterling","Thompson","Windham","Woodstock")
real_estate$county[which(real_estate$Name %in% windham)] <- "Windham"
fit = lm(SalePrice2 ~ AssessedValue2 + county, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
h <- ggplot(real_estate, aes(y=SalePrice2)) +
geom_histogram()
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram()
h
?geom_histogram
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(stat="identity")
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(stat="stat", bins = 1000)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 1000)
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 100)
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
h
plot(real_estate$SalePrice2)
barplot(real_estate$SalePrice2)
hist(real_estate$SalePrice2)
hist(real_estate$SalePrice2, bins = 50)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
h
ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
fivenum(real_estate$SalePrice2)
summary(real_estate$SalePrice2)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 800) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 30) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 20) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 10) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 1000) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
library(flexdashboard)
library(DT)
datatable(iris)
datatable(real_estate)
datatable(real_estate, n=1000)
datatable(head(real_estate, n=1000))
datatable(head(real_estate, n=100))
datatable(head(real_estate, n=100))
range(real_estate$SalePrice2)
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
count(real_estate, Nme)
count(real_estate, Name)
str(real_estate)
nums <- nrow(real_estate)
nums
med <- median(real_estate$SalePrice2)
med
dplyr::count(real_estate, Name)
table(real_estate$Name)
max(table(real_estate$Name))
max(which(table(real_estate$Name)))
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
tbl = table(real_estate$Name)
class(tbl)
str(tbl)
View(as.data.frame(tbl))
tbl = as.data.frame(table(real_estate$Name))
View(tbl)
max(tbl)
str(tbl)
tbl$Freq <- as.numeric(Freq)
tbl$Freq <- as.numeric(tbl$Freq)
str(tbl)
max(tbl)
max(tbl$Freq)
mx <- tbl$Var1[which(tbl$Freq == max(tbl$Freq))]
mx
str(mx)
mx[1]
mx[[1]]
class(mx)
as.character(mx)
valueBox(mx, icon = "fa-road")
q()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
he <- head(real_estate, n=10)
datatable(he)
cor(real_estate$SalePrice2, real_estate$AssessedValue2) # moderate-high value
# scatterplot
b_real_estate <- real_estate[, - 3] # create background data for plot
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
x = "Assesed Value ($)", y = "Sale Price ($)") +
guides(fill = FALSE)
ggplotly(s)
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
View(real_estate)
591500 / 552090
552090 /  591500
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + NonUseCode, data = real_estate)
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + NonUseCode, data = real_estate)
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + NonUseCode, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + ResidentialType, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + ResidentialType + ResidentialUnits, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
plot(real_estate$ListYear)
barplot(real_estate$ListYear)
hist(real_estate$ListYear)
ggplot(real_estate, aes(x = ListYear)) +
geom_histogram()
ggplot(real_estate, aes(x = ListYear)) +
geom_bar()
ggplot(real_estate, aes(x = ListYear, color = ListYear)) +
geom_bar()
ggplot(real_estate, aes(x = ListYear, fill = ListYear)) +
geom_bar()
b <- ggplot(real_estate, aes(x = ListYear, fill = ListYear, color = ListYear)) +
geom_bar()
ggplotly(b)
b <- ggplot(real_estate, aes(x = ListYear, color = factor(ListYear ))) +
geom_bar()
ggplotly(b)
b <- ggplot(real_estate, aes(x = ListYear, fill = factor(ListYear ))) +
geom_bar()
ggplotly(b)
b <- ggplot(real_estate, aes(x = ListYear, fill = factor(ListYear ))) +
geom_bar() +
guides(fill = FALSE) +
theme_bw()
ggplotly(b)
b <- ggplot(real_estate, aes(x = ListYear, fill = factor(ListYear ))) +
geom_bar() +
theme_bw() +
labs(title = "Real Estate List Year Distribution",
y = "")
ggplotly(b)
b <- ggplot(real_estate, aes(x = ListYear, fill = factor(ListYear ))) +
geom_bar() +
theme_bw() +
labs(title = "Real Estate List Year Distribution",
y = "", x = "")
ggplotly(b)
hist(real_estate$Name)
barplot(real_estate$Name)
plot(real_estate$Name)
m <- ggplot(real_estate, aes(x = Name)) +
geom_bar() +
theme_bw() +
labs(title = "Towns with Most Real Estate Sales",
y = "", x = "")
m <- ggplot(real_estate, aes(x = Name)) +
geom_bar() +
theme_bw() +
labs(title = "Towns with Most Real Estate Sales",
y = "", x = "")
ggplotly(m)
m <- ggplot(real_estate, aes(x = county)) +
geom_bar() +
theme_bw() +
labs(title = "Towns with Most Real Estate Sales",
y = "", x = "")
ggplotly(m)
m <- ggplot(real_estate, aes(x = county, fill = factor(county))) +
geom_bar() +
theme_bw() +
labs(title = "Towns with Most Real Estate Sales",
y = "", x = "")
ggplotly(m)
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar()
ggplotly(t)
t <- ggplot(real_estate, aes(x= ResidentialType, fill = factor(ResidentialType))) +
geom_bar() +
theme_bw() +
labs(title = "Counties with Most Real Estate Sales",
y = "", x = "")
ggplotly(t)
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "")
ggplotly(t)
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplotly(t)
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
t <- ggplot(real_estate, aes(x= reorder(ResidentialType)) ) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
unique(real_estate$ResidentialType)
dput(unique(real_estate$ResidentialType))
types <-  c("Commercial", "Condo Family", "Four Family", "Industrial",
"Single Family", "Three Family", "Two Family", "Vacant Land",
"Apartments", "Public Utility")
t_real_estate <- real_estate[which(real_estate$ResidentialType %in% types)]
types <-  c("Commercial", "Condo Family", "Four Family", "Industrial",
"Single Family", "Three Family", "Two Family", "Vacant Land",
"Apartments", "Public Utility")
t_real_estate <- real_estate[real_estate$ResidentialType %in% types]
types <-  c("Commercial", "Condo Family", "Four Family", "Industrial",
"Single Family", "Three Family", "Two Family", "Vacant Land",
"Apartments", "Public Utility")
t_real_estate <- real_estate[which(real_estate$ResidentialType %in% types),]
t <- ggplot(real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
types <-  c("Commercial", "Condo Family", "Four Family", "Industrial",
"Single Family", "Three Family", "Two Family", "Vacant Land",
"Apartments", "Public Utility")
t_real_estate <- real_estate[which(real_estate$ResidentialType %in% types),]
t <- ggplot(t_real_estate, aes(x= ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
summary(real_estate$SalesRatio)
library(lubridate)
unique(real_estate$DateRecorded)
ymd("2013-10-19 EDT")
month("2013-10-19 EDT")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(lubridate)
real_estate$month <- month(real_estate$DateRecorded)
unique(real_estate$month)
real_estate$season <- NULL
fall <- c(9, 10, 11)
winter <- c(12, 1, 2)
spring <- c(3, 4, 5)
summer <- c(6, 7, 8)
real_estate$season[which(real_estate$month %in% fall)] <- "Fall"
real_estate$season <- NA
real_estate$season[which(real_estate$month %in% fall)] <- "Fall"
real_estate$season[which(real_estate$month %in% winter)] <- "Winter"
real_estate$season[which(real_estate$month %in% spring)] <- "Spring"
real_estate$season[which(real_estate$month %in% summer)] <- "Summer"
seas <- ggplot(real_estate, aes(x = season)) +
geom_bar() +
theme_bw() +
labs(title = "Seasons for Real Estate Sales",
y = "", x = "")
ggplotly(seas)
seas <- ggplot(real_estate, aes(x = season, color = season)) +
geom_bar() +
theme_bw() +
labs(title = "Seasons for Real Estate Sales",
y = "", x = "")
ggplotly(seas)
seas <- ggplot(real_estate, aes(x = season, fill = season)) +
geom_bar() +
theme_bw() +
labs(title = "Seasons for Real Estate Sales",
y = "", x = "")
ggplotly(seas)
# Initial Linear Model
fit = lm(SalePrice2 ~ AssessedValue2 + county + ListYear + ResidentialType + ResidentialUnits + season, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
# the model could definelty be improved with other factors not in this data-set
mon <- ggplot(real_estate, aes(x = month, fill = season)) +
geom_bar() +
theme_bw() +
labs(title = "Months for Real Estate Sales",
y = "", x = "")
ggplotly(mon)
mon <- ggplot(real_estate, aes(x = month, fill = season)) +
geom_bar() +
scale_x_discrete() +
theme_bw() +
labs(title = "Months for Real Estate Sales",
y = "", x = "")
ggplotly(mon)
t <- ggplot(t_real_estate, aes(x= ResidentialType, fill = ResidentialType)) +
geom_bar() +
theme_bw() +
labs(title = "Residential Types of Real Estate Sales",
y = "", x = "") +
coord_flip()
ggplotly(t)
q()
