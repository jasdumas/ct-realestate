install.packages("RSocrata")
library(RSocrata)
url = "https://data.ct.gov/Housing-and-Development/Real-Estate-Sales-By-Town-for-2011-2012-2013/8udc-aepg"
real_estate <- read.socrata(url)
str(real_estate)
fit = lm(SalePrice ~ Name + AssessedValue, data = real_estate)
View(real_estate)
is.na(real_estate$Name)
save(real_estate, "real_estate.RData")
save.image(real_estate)
save.image(real_estate, "real_estate.RData")
save.image(real_estate, file = "real_estate.RData")
?save
save(real_estate, file = "real_estate.RData")
?gsub
gsub("$", real_estate$AssessedValue)
gsub("$", x = real_estate$AssessedValue)
gsub("$", "", real_estate$AssessedValue)
View(real_estate)
real_estate$AssessedValue <- gsub("$", "", real_estate$AssessedValue)
View(real_estate)
as.numeric(real_estate$AssessedValue)
View(real_estate)
real_estate$AssessedValue <- gsub("[:punct:]", "", real_estate$AssessedValue)
View(real_estate)
real_estate$AssessedValue <- gsub("^[:punct:]", "", real_estate$AssessedValue)
View(real_estate)
View(real_estate)
real_estate$AssessedValue <- gsub("^[[:punct:]]", "", real_estate$AssessedValue)
View(real_estate)
summary(real_estate$Name)
unique(real_estate$Name)
real_estate$AssessedValue <- as.numeric(real_estate$AssessedValue)
real_estate$SalePrice <- as.numeric(real_estate$SalePrice)
View(real_estate)
real_estate <- read.socrata(url)
View(real_estate)
load("~/Desktop/R-directory/regression/ct-realestate/real_estate.RData")
View(real_estate)
str(real_estate)
real_estate$AssessedValue <- gsub("^[[:punct:]]", "", real_estate$AssessedValue)
real_estate$SalePrice <- gsub("^[[:punct:]]", "", real_estate$SalePrice)
real_estate$AssessedValue2 <- as.numeric(real_estate$AssessedValue)
real_estate$SalePrice2 <- as.numeric(real_estate$SalePrice)
View(real_estate)
fit = lm(SalePrice2 ~ Name + AssessedValue2, data = real_estate)
summary(fit)
fit2 = lm(SalePrice2 ~ Name + SalesRatio, data = real_estate)
summary(fit2)
fit3 = lm(SalePrice2 ~ AssessedValue2, data = real_estate)
summary(fit3)
fit4 = lm(SalesRatio ~ Name, data = real_estate)
summary(fit4)
cor(real_estate)
cor(real_estate$SalePrice2, real_estate$AssessedValue2)
cor(real_estate$SalePrice2, real_estate$SalesRatio)
library(ggplot2)
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2))
s + geom_point()
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point()
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = ListYear))
s
as.factor(levels(real_estate$ListYear))
factor(levels(real_estate$ListYear))
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear)))
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear))) +
geom_jitter()
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear), size = SalePrice2))
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear), size = SalePrice2)) +
scale_y_continuous(labels = comma)
s
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear), size = SalePrice2)) +
scale_y_continuous(labels = function(n){format(n, scientific = FALSE)})
s
1.5e+08
?kmeans
km <- kmeans(real_estate, 5)
km <- kmeans(real_estate$SalePrice, 5)
km
names(real_estate)
cor(real_estate$SalePrice2, real_estate$AssessedValue2)
cor(real_estate$SalePrice2, real_estate$SalesRatio)
?confint
confint(fit, "SalePrice2", level = 0.95)
fit = lm(SalePrice2 ~ AssessedValue2, data = real_estate)
summary(fit)
confint(fit, "SalePrice2", level = 0.95)
confint(fit, SalePrice2, level = 0.95)
confint(fit, 'SalePrice2', level = 0.95)
predict(fit)
?predict
fit = lm(SalePrice2 ~ AssessedValue2 + Name, data = real_estate)
summary(fit)
?render()
render(input = "CT Real Estate Sales from 2011-2013.Rmd", output_format = "html_document")
rmarkdown::render(input = "CT Real Estate Sales from 2011-2013.Rmd", output_format = "html_document")
runUrl("https://github.com/jasdumas/regression/tree/master/ct-realestate")
runUrl("https://github.com/jasdumas/regression/blob/master/ct-realestate/CT%20Real%20Estate%20Sales%20from%202011-2013.Rmd")
install.packages("RSocrata")
library(RSocrata)
url = "https://data.ct.gov/Housing-and-Development/Real-Estate-Sales-By-Town-for-2011-2012-2013/8udc-aepg"
real_estate <- read.socrata(url)
save(real_estate, file = "real_estate.RData")
str(real_estate)
View(head(real_estate))
# remove $ punctuation
real_estate$AssessedValue <- gsub("^[[:punct:]]", "", real_estate$AssessedValue)
real_estate$SalePrice <- gsub("^[[:punct:]]", "", real_estate$SalePrice)
# change columns AssessedValue and SalePrice from chr to numeric
real_estate$AssessedValue2 <- as.numeric(real_estate$AssessedValue)
real_estate$SalePrice2 <- as.numeric(real_estate$SalePrice)
cor(real_estate$SalePrice2, real_estate$AssessedValue2) # moderate-high value
library(ggplot2)
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(color = factor(ListYear), size = SalePrice2)) +
theme_minimal()
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(size = SalePrice2)) +
facet_wrap(~ ListYear) +
theme_minimal()
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(size = SalePrice2, color = factor(ListYear))) +
facet_wrap(~ ListYear) +
theme_minimal()
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(size = SalePrice2, color = factor(ListYear))) +
facet_wrap(~ ListYear) +
theme_minimal() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)")
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2)) +
geom_point(aes(size = SalePrice2, color = factor(ListYear))) +
facet_wrap(~ ListYear) +
# theme_minimal() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)")
s # observable positive correlation
b_real_estate <- real_estate[, - 3] # create background data for plot
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=ListYear)) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, color=ListYear)) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=ListYear)) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point(color = factor(listYear)) +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=ListYear)) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point(color = factor(ListYear)) +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=ListYear)) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point(data = real_estate, color = factor(ListYear)) +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.5) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, color=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
xlab = "Assesed Value ($)", ylab = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
library(shiny)
shinyApp(
ui = pageWithSidebar(
headerPanel('CT Real Estate k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(real_estate), selected = "AssessedValue2"),
selectInput('ycol', 'Y Variable', names(real_estate),
selected="SalePrice2"),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
),
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999")),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
real_estate[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
library(shiny)
fit = lm(SalePrice2 ~ AssessedValue2 + Name, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
x = "Assesed Value ($)", y = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s <- ggplot(real_estate, aes(x = AssessedValue2, y = SalePrice2, fill=factor(ListYear))) +
geom_point(data=b_real_estate, fill = "grey", alpha=0.3) +
geom_point() +
facet_wrap(~ ListYear) +
theme_bw() +
labs(title = "Real Estate Prices by Listing Year",
x = "Assesed Value ($)", y = "Sale Price ($)") +
guides(fill = FALSE)
s # observable positive correlation
s
real_estate$county <- NA
str(real_estate)
?ifelse
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield")
fairfield <- c("Bethel","Bridgeport","Brookfield","Danbury","Darien",
"Easton","Fairfield","Greenwich","Monroe","New Canaan","New Fairfield",
"Newtown","Norwalk","Redding","Ridgefield","Shelton","Sherman","Stamford",
"Stratford","Trumbull","Weston","Westport","Wilton")
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield")
real_estate$county <- ifelse(real_estate$Name %in% fairfield, "Fairfield", "")
View(head(real_estate, n = 100))
hartford <- c("Avon","Berlin",
"Bloomfield",
"Bristol",
"Burlington",
"Canton",
"East Granby",
"East Hartford",
"East Windsor",
"Enfield",
"Farmington",
"Glastonbury",
"Granby",
"Hartford",
"Hartland",
"Manchester",
"Marlborough",
"New Britain",
"Newington",
"Plainville",
"Rocky Hill",
"Simsbury",
"South Windsor",
"Southington",
"Suffield",
"West Hartford",
"Wethersfield",
"Windsor",
"Windsor Locks")
real_estate$county <- ifelse(real_estate$Name %in% hartford, "Hartford", "")
View(real_estate)
real_estate$county[which(real_estate$Name %in% fairfield)] <- "Fairfield"
real_estate$county[which(real_estate$Name %in% hartford)] <- "hartford"
View(real_estate)
real_estate$county[which(real_estate$Name %in% hartford)] <- "Hartford"
litchfield <- c("Barkhamsted","Bethlehem","Bridgewater","Canaan",
"Colebrook","Cornwall","Goshen","Harwinton","Kent","Litchfield",
"Morris","New Hartford","New Milford","Norfolk","North Canaan",
"Plymouth","Roxbury","Salisbury","Sharon","Thomaston","Torrington","Warren",
"Washington","Watertown","Winchester","Woodbury")
real_estate$county[which(real_estate$Name %in% litchfield)] <- "Litchfield"
View(real_estate)
middlesex <- c("Chester","Clinton","Cromwell","Deep River",
"Durham","East Haddam","East Hampton","Essex","Haddam",
"Killingworth","Middlefield","Middletown","Old Saybrook","Portland","Westbrook")
real_estate$county[which(real_estate$Name %in% middlesex)] <- "Middlesex"
newhaven <- c("Ansonia","Beacon Falls","Bethany","Branford",
"Cheshire","Derby","East Haven","Guilford","Hamden","Madison","Meriden",
"Middlebury","Milford","Naugatuck","New Haven","North Branford",
"North Haven","Orange","Oxford","Prospect","Seymour","Southbury",
"Wallingford","Waterbury","West Haven","Wolcott","Woodbridge")
real_estate$county[which(real_estate$Name %in% newhaven)] <- "New Haven"
newlondon <- c("Bozrah", "Colchester","East Lyme","Franklin",
"Griswold","Groton","Lebanon","Ledyard","Lisbon","Lyme",
"Montville","New London","North Stonington","Norwich",
"Old Lyme","Preston","Salem","Sprague","Stonington","Voluntown","Waterford")
real_estate$county[which(real_estate$Name %in% newlondon)] <- "New London"
tolland <- c("Andover","Bolton","Columbia","Coventry","Ellington",
"Hebron","Mansfield","Somers","Stafford","Tolland",
"Union","Vernon","Willington")
real_estate$county[which(real_estate$Name %in% tolland)] <- "Tolland"
View(real_estate)
windham <- c("Ashford","Brooklyn","Canterbury","Chaplin","Eastford",
"Hampton","Killingly","Plainfield","Pomfret","Putnam","Scotland",
"Sterling","Thompson","Windham","Woodstock")
real_estate$county[which(real_estate$Name %in% windham)] <- "Windham"
fit = lm(SalePrice2 ~ AssessedValue2 + county, data = real_estate)
summary(fit) # low p-values for the overall model and coeffcients
h <- ggplot(real_estate, aes(y=SalePrice2)) +
geom_histogram()
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram()
h
?geom_histogram
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(stat="identity")
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(stat="stat", bins = 1000)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 1000)
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 100)
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
h
plot(real_estate$SalePrice2)
barplot(real_estate$SalePrice2)
hist(real_estate$SalePrice2)
hist(real_estate$SalePrice2, bins = 50)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
h
ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500)
fivenum(real_estate$SalePrice2)
summary(real_estate$SalePrice2)
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 500) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 800) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 30) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 20) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 10) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
h <- ggplot(real_estate, aes(x=SalePrice2)) +
geom_histogram(bins = 1000) +
theme_bw() +
labs(title = "Histogram of Sale Price, Response",
x = "Sale Price ($)", y="")
h
library(flexdashboard)
library(DT)
datatable(iris)
datatable(real_estate)
datatable(real_estate, n=1000)
datatable(head(real_estate, n=1000))
datatable(head(real_estate, n=100))
datatable(head(real_estate, n=100))
range(real_estate$SalePrice2)
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
count(real_estate, Nme)
count(real_estate, Name)
str(real_estate)
nums <- nrow(real_estate)
nums
med <- median(real_estate$SalePrice2)
med
dplyr::count(real_estate, Name)
table(real_estate$Name)
max(table(real_estate$Name))
max(which(table(real_estate$Name)))
library(flexdashboard)
library(RSocrata)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
tbl = table(real_estate$Name)
class(tbl)
str(tbl)
View(as.data.frame(tbl))
tbl = as.data.frame(table(real_estate$Name))
View(tbl)
max(tbl)
str(tbl)
tbl$Freq <- as.numeric(Freq)
tbl$Freq <- as.numeric(tbl$Freq)
str(tbl)
max(tbl)
max(tbl$Freq)
mx <- tbl$Var1[which(tbl$Freq == max(tbl$Freq))]
mx
str(mx)
mx[1]
mx[[1]]
class(mx)
as.character(mx)
valueBox(mx, icon = "fa-road")
q()
